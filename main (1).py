import discord
import random
from discord.ext import commands
import asyncio
import os
import json
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.orm import declarative_base, sessionmaker

intents = discord.Intents.default()
intents.members = True

bot = commands.Bot(intents=intents)

Base = declarative_base()
engine = create_engine('sqlite:///boas_vindas.db')
Session = sessionmaker(bind=engine)

CANAL_BOAS_VINDAS_ID = 1103118877388443700

frases = [
    
"Na escurid√£o da noite, a alma encontra sua morada eterna.", "Entre sombras e segredos, encontro minha paz mais profunda.", "A solid√£o √© minha companheira fiel, enquanto dan√ßo ao som dos suspiros noturnos.", "Nas asas da escurid√£o, voamos para a liberdade que a luz jamais conhecer√°.", "Meus pensamentos s√£o como teias de aranha, envolvendo o passado em suas intricadas tramas.", "Cuscuz com manteiga √© uma delicia ainda mais com o malboro."
]


class BoasVindas(Base):
    __tablename__ = 'boas_vindas'
    id = Column(Integer, primary_key=True)
    mensagem = Column(String)

@bot.event
async def on_ready():
    print(f"Bot est√° online! (ID: {bot.user.id})")
    Base.metadata.create_all(engine) 
    bot.loop.create_task(enviar_frase())
    
async def enviar_frase():
    while True:
        frase = random.choice(frases)
        canal = bot.get_channel(CANAL_BOAS_VINDAS_ID)
        if canal:
            await canal.send(frase)
        await asyncio.sleep(180 * 60)

@bot.slash_command(description="Define o texto de boas-vindas para novos membros")
async def set_welcome(ctx, *, mensagem: str):
    session = Session()
    session.query(BoasVindas).delete()
    session.commit()

    nova_mensagem = BoasVindas(mensagem=mensagem)
    session.add(nova_mensagem)
    session.commit()
    session.close()

    await ctx.send(f"Mensagem de boas-vindas definida: {mensagem}")
@bot.event
async def on_member_join(member):
    session = Session()
    mensagem_boas_vindas = session.query(BoasVindas).first()
    session.close()

    if mensagem_boas_vindas and mensagem_boas_vindas.mensagem.strip():
        mensagem = mensagem_boas_vindas.mensagem.replace("{user}", member.mention)
        canal = bot.get_channel(CANAL_BOAS_VINDAS_ID)
        if canal:
            await canal.send(mensagem)
            
@bot.event
async def on_message(message):
    if message.author == bot.user:
        return
    if bot.user.mentioned_in(message):
        fra_res = ["Me chamou, √©? O que voc√™ quer, hum? Fala logo que eu tenho coisas mais importantes pra fazer, t√°?", "Quem √© voc√™ mesmo? Nunca te vi na vida! E por que eu deveria me importar com o que voc√™ tem a dizer?", 
                "Ah, voc√™ lembrou do meu nome! √ìtimo, agora me diz o que voc√™ quer ganhar de presente de anivers√°rio, t√°?", "Pff, eu n√£o tenho tempo pra lembrar do nome de todo mundo por a√≠. Se apresenta de novo, vai!", 
                "Finalmente, algu√©m me chama pelo meu nome! O que posso fazer por voc√™, queridinho?", "Meu nome? Que coisa mais sem gra√ßa! Por que voc√™ t√° me perguntando isso mesmo?", "Quem ousa pronunciar meu nome? Espero que n√£o seja pra pedir um feiti√ßo ou algo do tipo, porque n√£o estou pra brincadeira!", 
                "Nome? Ah, isso n√£o √© importante! Vamos falar de coisas mais interessantes, como a √∫ltima fofoca que eu ouvi!", "Meu nome √© Wandinha, mas s√≥ pode me chamar assim se for meu amigo de verdade, t√°?", "N√£o tenho paci√™ncia pra ficar lembrando de nomes, nem do meu pr√≥prio! Qual √© mesmo o seu?", "Se mata", "E?", "Insignificante voc√™ √©."]
        response = random.choice(fra_res)
        user_mention = message.author.mention
        await message.channel.send(f"{user_mention}, {response}")

    await bot.process_commands(message)
    
@bot.slash_command(description="Torture algu√©m!")
async def torturar(ctx, vitima: discord.Member):
    
    death_gifs = ["https://media.tenor.com/REWJ8UUis8gAAAAC/stop-its-torture-inside-job.gif"]
    death_description = f"{ctx.author.mention} torturou {vitima.mention}! üíÄ"
    
    embed = discord.Embed(description=death_description, color=discord.Color.dark_red())
    embed.set_image(url=random.choice(death_gifs))
    
    await ctx.send(embed=embed)
    
if os.path.exists("xp.json"):
    with open("xp.json", "r") as f:
        xp_data = json.load(f)
else:
    xp_data = {}

@bot.event
async def on_message(message):
    if message.author.bot:
        return
    
    xp_amount = 3
    
    if str(message.author.id) not in xp_data:
        xp_data[str(message.author.id)] = {"xp": 0, "level": 1}
    
    xp_data[str(message.author.id)]["xp"] += xp_amount
    
    if xp_data[str(message.author.id)]["xp"] >= xp_data[str(message.author.id)]["level"] * 100:
        xp_data[str(message.author.id)]["level"] += 1
        await message.channel.send(f"Parab√©ns, {message.author.mention}! Voc√™ subiu para o n√≠vel {xp_data[str(message.author.id)]['level']}!")
    
    with open("xp.json", "w") as f:
        json.dump(xp_data, f)
    
    await bot.process_commands(message)

@bot.slash_command(description="Mostra o seu n√≠vel e XP.")
async def profile(ctx):
    if str(ctx.author.id) not in xp_data:
        await ctx.send("Voc√™ n√£o possui n√≠vel nem XP ainda.")
    else:
        level = xp_data[str(ctx.author.id)]["level"]
        xp = xp_data[str(ctx.author.id)]["xp"]
        await ctx.send(f"Seu n√≠vel √© {level} e voc√™ possui {xp} XP.")
        
@bot.slash_command(description="Mostra o rank dos membros")
async def rank(ctx):
    sorted_users = sorted(xp_data.keys(), key=lambda x: xp_data[x]["level"], reverse=True)

    rank_embed = discord.Embed(title="Rank dos Membros", color=discord.Color.gold())

    for index, user_id in enumerate(sorted_users, start=1):
        user = bot.get_user(int(user_id))
        if user is not None:
            level = xp_data[user_id]["level"]
            rank_embed.add_field(name=f"{index}. {user.display_name}", value=f"N√≠vel: {level}", inline=False)

    await ctx.send(embed=rank_embed)       

bot.run("TOKEN")
